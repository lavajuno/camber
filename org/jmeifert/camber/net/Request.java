package org.jmeifert.camber.net;

import java.io.Serializable;
import java.io.UnsupportedEncodingException;

/**
 * Request represents a container of serializable data to be sent over the network.
 */
public class Request implements Serializable {
    final String CHARSET = "UTF-8";

    public enum Types {
        // MISC + CONTROL
        handshake,              // [C<->S] Handshake to test connection
        handshakeResponse,      // [C<->S] |> Response to handshake (Body: None)
        goodbye,                // [C-->S] Graceful disconnect (Body: None)
        goodbyeResponse,        // [C<--S] \> Confirm disconnect (Body: None)
        reset,                  // [C<->S] Hard disconnect (Body: None)

        // MESSAGES
        getMessages,            // [C-->S] Get recent messages from this group (Body: None)
        getAllMessages,         // [C-->S] Get recent messages from all groups (Body: None)
        messages,               // [C<--S] |> Return recent messages (Body: Messages)
        sendMessage,            // [C-->S] Send a message (Body: Message to send)
        messageConfirm,         // [C<--S] \> Confirm message sent (Body: None)

        // ENCRYPTION
        clientKey,              // [C-->S] Client's RSA public key (Body: Key)
        serverKey,              // [C<--S] \> Symmetric key generated by server (Body: Key)

        // CREDENTIALS
        setPassword,            // [C-->S] Set password (Body: Hashed password)
        passwordConfirm,        // [C<--S] \> Confirm password set (Body: None)
        setNickname,            // [C-->S] Set nickname (Body: nickname)
        nicknameConfirm,        // [C<--S] \> Confirm nickname set (Body: None)

        // GROUPS & CHANNELS
        setGroup,               // [C-->S] Set active group
        groupConfirm,           // [C<--S] \> Confirm group set
        getTopics,              // [C-->S] Get list of topics
        topics,                 // [C<--S] List of topics
        setTopic,               // [C-->S] Set active topic
        topicConfirm,           // [C<--S] \> Confirm topic set

        // ERRORS
        messageError,           // [C<--S] Error getting messages
        groupError,             // [C<--S] Error setting group
        topicError,             // [C<--S] Error getting topic
        passwordError,          // [C<--S] Error setting password
        nicknameError,          // [C<--S] Error setting nickname
        sequenceError,          // [C<--S] Error related to sequence of events establishing connection
        illegalRequestError,    // [C<--S] Error related to an illegal request
    }

    private Types type;
    private byte[] body;

    /**
     * Instantiates a Request.
     * @param type The Request's type
     * @param body The Request's body (String)
     */
    public Request(Types type, String body) {
        this.type = type;
        try {
            this.body = body.getBytes(CHARSET);
        } catch(UnsupportedEncodingException e ) {
            System.err.println("Encoding 'UTF-8' does not exist - You should NOT be seeing this error.");
            this.body = new byte[0];
        }
    }

    /**
     * Instantiates a Request.
     * @param type The Request's type
     * @param body The Request's body (byte[])
     */
    public Request(Types type, byte[] body) {
        this.type = type;
        this.body = body;
    }

    /**
     * Instantiates a Request
     * @param type The Request's type
     */
    public Request(Types type) {
        this.type = type;
        this.body = new byte[0];
    }

    /**
     * Instantiates a Request
     */
    public Request() {
        this.type = Types.handshake;
        this.body = new byte[0];
    }

    /**
     * @return This Request's type
     */
    public Types getType() {
        return type;
    }

    /**
     * @param type This Request's type
     */
    public void setType(Types type) {
        this.type = type;
    }

    /**
     * @return This Request's body (byte[])
     */
    public byte[] getBytes() {
        return body;
    }

    /**
     * @return This Request's body (String)
     */
    public String getString() {
        try {
            return new String(body, CHARSET);
        } catch(UnsupportedEncodingException e) {
            System.err.println("Encoding 'UTF-8' does not exist - You should NOT be seeing this error.");
            return "";
        }

    }

    /**
     * @param newBody This Request's body (String)
     */
    public void setBody(String newBody) {
        try {
            this.body = newBody.getBytes(CHARSET);
        } catch(UnsupportedEncodingException e) {
            System.err.println("Encoding 'UTF-8' does not exist - You should NOT be seeing this error.");
            this.body = new byte[0];
        }
    }

    /**
     * @param newBody This Request's body (byte[])
     */
    public void setBody(byte[] newBody) {
        this.body = newBody;
    }
}